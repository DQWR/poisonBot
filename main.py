import logging
import sqlite3
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import ParseMode
from aiogram.utils import executor

# –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
manager_username = "@123"
manager_link = f'<a href="tg://user?id={manager_username}">{manager_username}</a>'

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot("TOKEN", parse_mode=ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
DATABASE = 'orders.db'

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
price_btn = KeyboardButton('–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Öüí∞')
contact_btn = KeyboardButton('–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–ºüìû')
order_btn = KeyboardButton('–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üì¶')

# menu_btn = KeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é')

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç ReplyKeyboardMarkup –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
markup = ReplyKeyboardMarkup(
    keyboard=[
        [
            price_btn,
            order_btn
        ],
        [
            contact_btn
        ]
    ],
    resize_keyboard=True
)  # menu_btn


def init_db():
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute(
        'CREATE TABLE IF NOT EXISTS orders (id INTEGER PRIMARY KEY AUTOINCREMENT, username VARCHAR, user_id INTEGER, price DECIMAL, article TEXT)')
    conn.commit()
    conn.close()


def save_order(username, user_id, price, article):
    conn = sqlite3.connect(DATABASE)
    cursor = conn.cursor()
    cursor.execute('INSERT INTO orders (username, user_id, price, article) VALUES (?, ?, ?, ?)',
                   (username, user_id, price, article))
    conn.commit()
    conn.close()


# —Å–æ–∑–¥–∞–µ–º –∫–ª–∞—Å—Å —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞
class OrderForm(StatesGroup):
    price = State()
    article = State()
    payment = State()


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤. '
                         '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup=markup, parse_mode='HTML')


# # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"
# @dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é'))
# async def return_to_menu(message: types.Message):
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
#     await message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
#         reply_markup=ReplyKeyboardMarkup(
#             keyboard=[
#                 [
#                     KeyboardButton(text="–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"),
#                     KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"),
#                 ],
#                 [
#                     KeyboardButton(text="–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"),
#                 ],
#             ],
#             resize_keyboard=True,
#         ),
#     )


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
@dp.message_handler(Text(equals='–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–ºüìû'))
async def ask_price(message: types.Message):
    await message.answer(
        f"–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –∫–∞–∫–∏–µ-–Ω–∏–±—É–¥—å –≤–æ–ø—Ä–æ—Å—ã, —Ç–æ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –∏—Ö –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É <b>{manager_link}</b>",
        parse_mode='HTML'
    )


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫–∞–∑–∞
@dp.message_handler(Text(equals='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑üì¶'))
async def process_order_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ <b>–≤ —é–∞–Ω—è—Ö:</b>', reply_markup=markup, parse_mode='HTML')

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "—Ü–µ–Ω–∞"
    await OrderForm.price.set()


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
async def process_cancel_command(message: types.Message, state: StatesGroup):  # state: FSMContext
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()

    # —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    # markup = types.ReplyKeyboardRemove()
    await message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>"–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑"</b>, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.',
                         reply_markup=markup, parse_mode='HTML')


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "—Ü–µ–Ω–∞"
@dp.message_handler(lambda message: not message.text.isdigit(), state=OrderForm.price)
async def process_order_step1_invalid(message: types.Message):
    await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@dp.message_handler(lambda message: message.text.isdigit(), state=OrderForm.price)
async def process_order_step1(message: types.Message, state: StatesGroup):
    async with state.proxy() as data:
        data['price'] = round(int(message.text) * 12.7, 2)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:', reply_markup=markup)

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–∞—Ä—Ç–∏–∫—É–ª"
    await OrderForm.article.set()


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "–∞—Ä—Ç–∏–∫—É–ª"
@dp.message_handler(state=OrderForm.article)
async def process_order_step2(message: types.Message, state: StatesGroup):
    async with state.proxy() as data:
        data['article'] = message.text

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    markup.add(types.KeyboardButton('–û–ø–ª–∞—Ç–∏—Ç—å'))
    markup.add(types.KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    await message.answer('–í—ã –∑–∞–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Ç–æ–≤–∞—Ä –∑–∞ <b>{price} —Ä—É–±–ª–µ–π</b>, —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º <b>{article}</b>. '
                         '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å", —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ.'
                         .format(price=round(data['price'], 2), article=data['article']),
                         reply_markup=markup, parse_mode='HTML')

    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ "–æ–ø–ª–∞—Ç–∞"
    await OrderForm.payment.set()


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—Ç–∏—Ç—å"
@dp.message_handler(Text(equals='–û–ø–ª–∞—Ç–∏—Ç—å', ignore_case=True), state=OrderForm.payment)
async def process_order_step3(message: types.Message, state: StatesGroup):  # state: FSMContext
    # async with state.proxy() as data:
    #     price = data['price']
    #     article = data['article']

    await bot.send_message(message.chat.id,
                           '–ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã: <b>1234 5678 9012 3456</b>, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –æ–ø–ª–∞—Ç—É')

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    # save_order(price, article, '')

    # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞
    # await state.finish()
    await OrderForm.payment.set()


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO, state=OrderForm.payment)
async def process_order_step4(message: types.Message, state: StatesGroup):  # state: FSMContext
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ —Ñ–∞–π–ª
    # photo_id = message.photo[-1].file_id
    # file_path = await bot.get_file(photo_id)
    # file = await bot.download_file(file_path.file_path)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    async with state.proxy() as data:
        price = data['price']
        article = data['article']
    save_order(message.from_user.username, message.from_user.id, price, article)

    # –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞
    await state.finish()

    ##### –õ–ï–ù–Ø –í–û–¢ –¢–£–¢ –ê–ô–î–ò–®–ù–ò–ö –¢–ò–ü–ê –ö–û–¢–û–†–û–ú–£ –ù–£–ñ–ù–û –ü–ï–†–ï–°–õ–ê–¢–¨
    await bot.forward_message(chat_id=497731774, from_chat_id=message.chat.id, message_id=message.message_id)
    await bot.send_message(chat_id=497731774, text=f'–Ω–∏–∫–Ω–µ–π–º - {message.from_user.username}\n–∞–π–¥–∏ - {message.from_user.id}\n—Ü–µ–Ω–∞ –≤ —Ä—É–± - {price}\n–∞—Ä—Ç–∏–∫—É–ª - {article}')
    await bot.send_message(chat_id=497731774, text='----------------------')

    await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É. –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–û–∂–∏–¥–∞–π—Ç–µ, —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä',
                         reply_markup=markup)


# –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"
@dp.message_handler(Text(equals='–£–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —Ä—É–±–ª—è—Öüí∞'))
async def ask_price(message: types.Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ FSM
    # await OrderForm.price.set()
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞:")


# —Å–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è "—Ü–µ–Ω–∞"
@dp.message_handler(lambda message: not message.text.isdigit())
async def process_order_step_invalid(message: types.Message):
    await message.answer('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.')


@dp.message_handler(lambda message: message.text.isdigit())
async def process_order_step(message: types.Message):
    price = int(message.text)
    # –£–º–Ω–æ–∂–∞–µ–º —Ü–µ–Ω—É –Ω–∞ 10
    price *= 12.7

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await message.answer(f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <b>{round(price, 2)}</b>—Ä—É–±", parse_mode='HTML')


if __name__ == '__main__':
    init_db()
    executor.start_polling(dp, skip_updates=True)
